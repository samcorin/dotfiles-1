set tabstop=4
set sw=4
set expandtab
filetype indent on
set cindent
set autoindent
set showmode
set showmatch
set backspace=eol,indent,start
set ambiwidth=double
set list
set listchars=tab:>-,trail:-,nbsp:%,extends:>,precedes:<
set background=dark
 
if exists('&ambiwidth')
  set ambiwidth=double
endif
 
runtime $VIMRUNTIME/macros/matchit.vim
syntax enable
 
" keymaps
:map <C-A> g^
:imap <C-A> <ESC>g^i
:map <C-E> <END>
:imap <C-E>  <END>
:imap <UP> <ESC>gka
:imap <DOWN> <ESC>gja
:map <UP> gk
:map <DOWN> gj
 
:noremap k gk
:noremap j gj
:vmap k gk
:vmap j gj
 
:noremap n nzz
:noremap v p
:noremap p Nzz
 
map <C-z> <C-t>
map , <Leader>
map ,ptv <ESC>:'<,'>!perltidy<CR>
 
" execute filetype command with ',e'
nmap ,e :execute '!' &ft ' %'<CR>
 
set laststatus=2
 
" status line
function! GetB()
  let c = matchstr(getline('.'), '.', col('.') - 1)
  let c = iconv(c, &enc, &fenc)
  return String2Hex(c)
endfunction
" :help eval-examples
" The function Nr2Hex() returns the Hex string of a number.
func! Nr2Hex(nr)
  let n = a:nr
  let r = ""
  while n
    let r = '0123456789ABCDEF'[n % 16] . r
    let n = n / 16
  endwhile
  return r
endfunc
" The function String2Hex() converts each character in a string to a two
" character Hex string.
func! String2Hex(str)
  let out = ''
  let ix = 0
  while ix < strlen(a:str)
    let out = out . Nr2Hex(char2nr(a:str[ix]))
    let ix = ix + 1
  endwhile
  return out
endfunc
 
if winwidth(0) >= 120
  set statusline=%<[%n]%m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}%y\ %F%=[%{GetB()}]\ %l,%c%V%8P
else
  set statusline=%<[%n]%m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}%y\ %f%=[%{GetB()}]\ %l,%c%V%8P
end
 
set wildmenu
 
" set tags
if has("autochdir")
  set autochdir
  set tags=TAGS,tags;
else
endif
 
 
" encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=iso-2022-jp,euc-jp,cp932
set fileformats=unix,dos,mac
set ambiwidth=double
 
function! AU_ReCheck_FENC()
  if &fileencoding =~# 'iso-2022-jp' && search("[^\x01-\x7E]", 'n') == 0
    let &fileencoding='utf-8'
  end
endfunction
autocmd BufReadPost * call AU_ReCheck_FENC()
 
au! BufNewFile,BufRead *.as :set filetype=actionscript
au! BufNewFile,BufRead *.mxml :set filetype=mxml
 
autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | silent! exe '!echo -n "\ek%:t\e\\"' | endif

let g:filetype_m = 'objc'

let skk_large_jisyo = "~/Library/AquaSKK/SKK-JISYO.L"
